import React, { Component } from 'react';

import styles from "./styles.scss"
import { BrowserRouter, HashRouter, Route, Redirect, Switch, Link } from 'react-router-dom'
import {connect } from 'react-redux';

import { 
    Modal,
    Button, 
    OverlayTrigger, 
    Popover, 
    Tooltip, 
    Row, 
    Col,
    Alert } from 'react-bootstrap';
    


class BackgroundInformation extends Component {
    constructor (props) {
        super(props)
        this.state = {
          showAlert: false,
          typeAlert: 'success',
          titleAlert: 'This is Title',
          messageAlert: 'I am messagea lert'
        }
      }
    render () {
        // if (localStorage.getItem('SessionToken') == '') {
        //     this.props.user_logout()
        // }
        // const { match } = this.props;
        
        // const {
        //         first_name,
        //         last_name,
        //         middle_name,
        //         billing_address,
        //         email
        //     } = this.props.userDetils;
        return (
            <div>
                <div className={`row`}>
                    <div className={`col-md-12`}>
                        <h2> Background Information </h2>
                        <p> This section provides important information about the ADAX exchange software. </p>
                    </div>
                </div>
                <div className={`row`} style={{marginTop:'10px'}}>
                    <div className={`col-md-12`}>
                        <h4> Message Frame </h4>
                        <p> Wrap all calls to the ADAX Tech software in a JSON-formatted frame object. Responses from the software are similarly wrapped. </p>
                    </div>
                    <div className={`col-md-12`}>
                        <div className={`codeCont`}>
                            <div>{"{"}</div>
                            <div style={{paddingLeft:'10px'}}>{"“m”:0,"}</div>
                            <div style={{paddingLeft:'10px'}}>{"“i”:0,"}</div>
                            <div style={{paddingLeft:'10px'}}>{"“n”:”function_name”,"}</div>
                            <div style={{paddingLeft:'10px'}}>{"“o”:”payload”"}</div>
                            <div>{"}"}</div>
                        </div>
                        <div style={{marginTop:'10px'}}>Where:</div>
                        <div className={`tableCont`}>
                            <table className={`table backgroundInfoTbl`}>
                                <thead>
                                    <tr>
                                        <td>String</td>
                                        <td>Value</td>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td> <i>m</i> message type </td>
                                        <td>   
                                            <div><strong>integer.</strong> The type of the message:</div>
                                            <div>0 request</div>
                                            <div>1 reply</div>
                                            <div>2 subscribe to event</div>
                                            <div>3 event</div>
                                            <div>4 unsubscribe from event</div>
                                            <div>5 error</div>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td> <i>i</i> sequence number </td>
                                        <td>   
                                            <div><strong>long integer.</strong> The sequence number identifies an individual request, or requestand-response pair, to your application.</div>
                                            <div>A non-zero sequence number is required, but the numbering scheme you use is up to you. No arbitrary sequence numbering scheme is enforced by ADAX Tech.</div>
                                            <div><strong>Best practices:</strong> A client-generated API call (of message types 0, 2, and 4) should:</div>
                                            <div>Carry an even sequence number.</div>
                                            <div>Begin at the start of each user session.</div>
                                            <div>Be unique within each user session.</div>
                                            <div>Begin with 2 (2, 4, 6, 8).</div>
                                            <div>Message types 1 (reply), 3 (event), and 5 (error) are generated by the server. </div>
                                            <div>These messages echo the sequence number of the message to which they respond. See Example, below.. </div>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td> <i>n</i> function number </td>
                                        <td>   
                                            <div><strong>string.</strong> The function name is the name of the function that you are calling or that the server responds to. The server echoes your call. See Example, below.</div>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td> <i>o</i> payload </td>
                                        <td>   
                                            <div><i>Payload</i> is a JSON-formatted string containing the data being sent with the message. Payload may consist of request parameters (string-value pairs) or response parameters.</div>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        <div className={`noteCont`}>
                            <p><strong>Note: </strong>You can send the string-value pairs inside the payload in any order; the server controls the order of the response.</p>
                        </div>
                    </div>
                </div>
                <div className={`row`} style={{marginTop:'10px'}}>
                    <div className={`col-md-12`}>
                        <h4> Example </h4>
                        <p> When sending a request in the frame to the software using JavaScript, a call looks like: </p>
                        <div className={`codeCont`}>
                            <div>{"var frame = "}</div>
                            <div>{"{"}</div>
                            <div style={{paddingLeft:'10px'}}>{"“m”:0,"}</div>
                            <div style={{paddingLeft:'10px'}}>{"“i”:0,"}</div>
                            <div style={{paddingLeft:'10px'}}>{"“n”:”function name”,"}</div>
                            <div style={{paddingLeft:'10px'}}>{"“o”:””"}</div>
                            <div>{"}"}</div>
                        </div>
                        <div className={`codeCont`}>
                            <div>{"var requestPayload = "}</div>
                            <div>{"{"}</div>
                            <div style={{paddingLeft:'10px'}}>{"“Parameter1”:”Value”,"}</div>
                            <div style={{paddingLeft:'10px'}}>{"“Parameter2”:0"}</div>
                            <div>{"};"}</div>
                            <div>{"frame.o = json.Stringify(requestPayload);"}</div>
                            <div>{"//Stringify escapes the payload’s quotation marks automatically."}</div>
                            <div>{"WS.Send(json.Stringify(frame)); //WS.Send escapes the frame."}</div>
                        </div>
                        <p style={{marginTop:'10px'}}> When receiving a frame from the software, use the frame to determine the context, and then unwrap the content: </p>
                        <div className={`codeCont`}>
                            <div>{"var frame = json.Parse(wsMessage);"}</div>
                            <div>{"if (frame.m == 1) //message of type reply"}</div>
                            <div>{"{"}</div>
                            <div style={{paddingLeft:'10px'}}>{"//This is a Reply"}</div>
                            <div style={{paddingLeft:'10px'}}>{"if (frame.n == “WebAuthenticateUser”)"}</div>
                            <div style={{paddingLeft:'10px'}}>
                                {"{"}
                                <div style={{paddingLeft:'10px'}}>{"var LoginReply = json.Parse(frame.o);"}</div>
                                <div style={{paddingLeft:'10px'}}>{"if (LoginReply.Authenticated)"}</div>
                                <div style={{paddingLeft:'10px'}}>
                                    {"{"}
                                    <div style={{paddingLeft:'10px'}}>{"var user = LoginReply.User;"}</div>
                                    {"}"}
                                </div>
                                {"}"}
                            </div>
                            <div>{"}"}</div>
                        </div>
                        <div className={`noteCont`}>
                            <p><strong>Note: </strong>If not using JSON Stringify, escape quotation marks.</p>
                        </div>
                    </div>
                </div>
                <div className={`row`} style={{marginTop:'10px'}}>
                    <div className={`col-md-12`}>
                        <h4> Standard Response Object and Common Error Codes </h4>
                        <p> A response to an API call usually consists of a specific response object (as documented in this guide), but both successful and unsuccessful responses may consist of a generic response object that verifies that the call was received; the response to an unsuccessful call provides an error code. A generic response looks like: </p>
                        <div className={`codeCont`}>
                            <div>{"{"}</div>
                            <div style={{paddingLeft:'10px'}}>{"“result”: true,"}</div>
                            <div style={{paddingLeft:'10px'}}>{"“errormsg”: “”,"}</div>
                            <div style={{paddingLeft:'10px'}}>{"“errorcode”: 0,"}</div>
                            <div style={{paddingLeft:'10px'}}>{"“detail”: “”,"}</div>
                            <div>{"}"}</div>
                        </div>
                        <div style={{marginTop:'10px'}}>Where:</div>
                        <div className={`tableCont`}>
                            <table className={`table backgroundInfoTbl`}>
                                <thead>
                                    <tr>
                                        <td>String</td>
                                        <td>Value</td>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td> result </td>
                                        <td>   
                                            <div><strong>Boolean.</strong> If the call has been successfully received by the Order Management System, result is <i>true</i>; otherwise, it is <i>false</i>.</div>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td> errormsg </td>
                                        <td>   
                                            <div><strong>string.</strong>  A successful receipt of the call returns null; the <i>errormsg</i> parameter for an unsuccessful call returns one of the following messages:</div>
                                            <div> Not Authorized (errorcode 20) </div>
                                            <div> Invalid Request (errorcode 100) </div>
                                            <div> Operation Failed (errorcode 101) </div>
                                            <div> Server Error (errorcode 102) </div>
                                            <div> Resource Not Found (errorcode 104) </div>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td> errorcode </td>
                                        <td>   
                                            <div><strong>integer.</strong>  A successful receipt of the call returns 0. An unsuccessful receipt of the call returns one of the <i>errorcodes</i> shown in the <i>errormsg</i> list.</div>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td> detail </td>
                                        <td>   
                                            <div><strong>string.</strong> Message text that the system may send. The content of this parameter is usually <i>null</i>.</div>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                <div className={`row`} style={{marginTop:'10px'}}>
                    <div className={`col-md-12`}>
                        <h4> Authenticated and Public Calls </h4>
                        <p> All API calls require that the user be logged-in and authenticated — with the following exceptions that can be called without prior authentication: </p>
                        <div className={`tableCont`}>
                            <table className={`table table-borderless authenticatedPublicCallsTbl`}>
                                <tbody>
                                    <tr>
                                        <td> Authenticate2FA </td>
                                        <td> GetTickerHistory </td>
                                    </tr>
                                    <tr>
                                        <td> WebAuthenticateUser </td>
                                        <td> SubscribeLevel1 </td>
                                    </tr>
                                    <tr>
                                        <td> LogOut </td>
                                        <td> SubscribeLevel2 </td>
                                    </tr>
                                    <tr>
                                        <td> GetInstrument </td>
                                        <td> SubscribeTicker </td>
                                    </tr>
                                    <tr>
                                        <td> GetInstruments </td>
                                        <td> UnsubscribeLevel1 </td>
                                    </tr>
                                    <tr>
                                        <td> GetProduct </td>
                                        <td> UnsubscribeLevel2 </td>
                                    </tr>
                                    <tr>
                                        <td> GetProducts </td>
                                        <td> UnsubscribeTicker </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        <p> However, the individual trading venue operator can control access to Ticker History and the Subscribe calls. Calls that require no authentication or that are venue-controlled are indicated underneath each call name. </p>
                    </div>
                </div>
                <div className={`row`} style={{marginTop:'10px'}}>
                    <div className={`col-md-12`}>
                        <h4> Level 1 and Level 2 Market Information </h4>
                        <p> The ADAX Tech software allows users to subscribe to Level 1 and Level 2 market information. </p>
                        <ul>
                            <li> <strong>Level 1 information</strong> consists of real-time bid and ask quotes for a specific instrument ID or instrument symbol. Level 1 provides last trade information; session open, high, low, and close (if the venue operates in sessions; 24-hour information if not); current, and rolling information. </li>
                            <li> <strong>Level 2 information</strong> also consists of real-time bid and ask quotes for a specific instrument ID or instrument symbol as does Level 1, but allows the user to specify the level of market depth information on either side of the bid and ask, and to see quantities.</li>
                        </ul>
                        <p> Access to Level 1 and Level 2 market information subscriptions is controlled by the trading venue operator. API calls that involve Level 1 or Level 2 information include: <strong>GetL2Snapshot, SubscribeLevel1, UnsubscribeLevel1, SubscribeLevel2, and UnsubscribeLevel2</strong>. </p>
                    </div>
                </div>
                <div className={`row`} style={{marginTop:'10px'}}>
                    <div className={`col-md-12`}>
                        <h4> Modules </h4>
                        <p> The ADAX Tech software consists of several modules that include the Order Management System, the matching engine, and the Asset Manager. During installation, each is assigned an ID. </p>
                        <p> The <i>Order Management System</i> — or OMS — is the mechanism that manages access to the trading venue. The OMS controls permissions, accounts, and users. The OMS ID must be specified in most calls. </p>
                        <p> The order book resides on the ADAX Tech <i>matching engine</i>. A trading venue is a combination of OMS and matching engine that creates a place to access the market and trade. A venue maintains its order book and matching engine, and may access several Order Management Systems. </p>
                        <p> The <i>Asset Manager</i> controls the deposit and withdrawal of the funds belonging to an account. These funds can be denominated in any product that the trading venue allows. </p>
                    </div>
                </div>
                <div className={`row`} style={{marginTop:'10px'}}>
                    <div className={`col-md-12`}>
                        <h4> Permissions </h4>
                        <p> An individual user may have multiple accounts. Similarly, multiple users may have trading privileges through a single account. There may be users who have trading access to one set of accounts that overlap (but do not fully duplicate) another user’s set of accounts. There may be a many-to-many relationship where two or more users have access to a set of accounts. </p>
                        <p> The use case for this kind of “joint tenancy” is an active trading desk where a specific individual may not always be present. If User A will not be present, User B can monitor and trade on the market. User A may wish to cancel his pending trades for a specific account or instrument, but not those of his trading partner under the same account or for the same instrument. </p>
                        <p> Permissions handle the rules that determine what a user can access and do with orders, cancellations, and other tasks in a trading venue. Most permissions encompass tasks such as trading, depositing, or making withdrawals; but permission can be set for each API call for each individual in the venue. This controls what a user can do. </p>
                        <p> The system administrator sets up permissions on the OMS when the user joins the trading venue, and only the system administrator can change them. A full discussion of permissions is not part of this document. </p>
                    </div>
                </div>
                <div className={`row`} style={{marginTop:'10px'}}>
                    <div className={`col-md-12`}>
                        <h4> Products and Instruments </h4>
                        <p> In ADAX Tech software, a <i>product</i> is an asset that is tradable or paid out. A product might be a currency or a commodity or something else. For example, a product might be a US Dollar or a New Zealand Dollar or a BitCoin or an ounce of gold. Fees are denominated in products. (Products may also be referred to as <i>assets</i> in the API calls.) </p>
                        <p> An instrument is a pair of exchanged products (or fractions of them). For example, US Dollars and an ounce of gold, or an ounce of gold and BitCoins. In conventional parlance, a stock or a bond is called an instrument, but implicit in that is the potential exchange of one product for another (stock for dollars). ADAX Tech software thinks of that exchange as explicit. </p>
                    </div>
                </div>
                <div className={`row`} style={{marginTop:'10px'}}>
                    <div className={`col-md-12`}>
                        <h4> Quotes and Orders </h4>
                        <p> The ADAX Tech API includes calls related to both quotes and orders. </p>
                        <ul>
                            <li> A quote expresses a willingness to buy or sell at a given price. </li>
                            <li> An order is a directive to buy or sell. </li>
                        </ul>
                        <p> In Version 2.23.9 or earlier of the ADAX Tech matching engine software, quotes and orders are synonymous. They both can result in a sell or a buy. This is because the matching engine (like most matching engines) requires a “firm quote” — a guaranteed bid or ask. For both quotes and orders, trading priority is the same, and no preference is given one over the other. In code, the matching engine flags a quote for eventual regulatory and compliance rules, but as far as current software operation and trade execution, they behave equivalently. </p>
                        <p> Quoting is not enabled for the retail end user of the ADAX Tech software. Only registered market participants or market makers may quote. </p>
                        <p> Your trading venue may offer quotes separately from orders. </p>
                        <p> <strong>Best practices:</strong> Use the order-related API calls in preference to quote-related calls unless you specifically require the quote-related calls. </p>
                        <div className={`tableCont`}>
                            <table className={`table table-borderless quotesAndOrdersTbl`}>
                                <thead>
                                    <tr>
                                        <td> Order-related API calls </td>
                                        <td> Quote-related API calls </td>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td> CancelAllOrders </td>
                                        <td> CancelQuote </td>
                                    </tr>
                                    <tr>
                                        <td> CancelOrder </td>
                                        <td> CreateQuote </td>
                                    </tr>
                                    <tr>
                                        <td> CancelReplaceOrder </td>
                                        <td> GetOpenQuotes </td>
                                    </tr>
                                    <tr>
                                        <td> GetOpenOrders </td>
                                        <td> UpdateQuote </td>
                                    </tr>
                                    <tr>
                                        <td> GetOrderFee </td>
                                        <td>  </td>
                                    </tr>
                                    <tr>
                                        <td> GetOrderHistory </td>
                                        <td>  </td>
                                    </tr>
                                    <tr>
                                        <td> GetOrderStatus </td>
                                        <td>  </td>
                                    </tr>
                                    <tr>
                                        <td> ModifyOrder </td>
                                        <td>  </td>
                                    </tr>
                                    <tr>
                                        <td> SendOrder </td>
                                        <td>  </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        );
    }
}

export default BackgroundInformation;